pipeline {
    agent any
    environment {
        AWS_REGION = 'us-east-1'
        APP_NAME = 'bean-pro'
        ENV_NAME = 'Bean-pro-env'
        S3_BUCKET = 'my-s3-bucket-for-jenkins-pipeline-setup1'
        ZIP_FILE = 'application.zip'
        S3_KEY = 'my-app.zip'
    }
    stages {
        stage('Verify Application Zip') {
            steps {
                script {
                    if (fileExists("${ZIP_FILE}")) {
                        echo "${ZIP_FILE} exists and is ready for upload."
                    } else {
                        error "${ZIP_FILE} is missing!"
                    }
                }
            }
        }
        stage('Upload to S3') {
            steps {
                script {
                    def uploadCommand = "aws s3 cp ./${ZIP_FILE} s3://${S3_BUCKET}/${S3_KEY} --region ${AWS_REGION}"
                    echo "Executing: ${uploadCommand}"
                    bat script: uploadCommand
                }
            }
        }
        stage('Create Application Version') {
            steps {
                script {
                    def versionLabel = "v-${BUILD_NUMBER}" // Use Jenkins build number for versioning
                    def createVersionCommand = """
                        aws elasticbeanstalk create-application-version \
                        --application-name ${APP_NAME} \
                        --version-label ${versionLabel} \
                        --source-bundle S3Bucket=${S3_BUCKET},S3Key=${S3_KEY} \
                        --region ${AWS_REGION}
                    """
                    echo "Executing: ${createVersionCommand}"
                    bat script: createVersionCommand
                }
            }
        }
        stage('Update Elastic Beanstalk Environment') {
            steps {
                script {
                    def versionLabel = "v-${BUILD_NUMBER}"
                    def updateEnvCommand = """
                        aws elasticbeanstalk update-environment \
                        --environment-name ${ENV_NAME} \
                        --version-label ${versionLabel} \
                        --region ${AWS_REGION}
                    """
                    echo "Executing: ${updateEnvCommand}"
                    bat script: updateEnvCommand
                }
            }
        }
    }
    post {
        success {
            echo 'Deployment process completed successfully.'
        }
        failure {
            echo 'Deployment process failed. Please check the logs for more details.'
        }
    }
}
